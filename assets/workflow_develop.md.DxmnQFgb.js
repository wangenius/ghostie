import{_ as a,c as i,o as t,ae as e}from"./chunks/framework.CTpjEI9A.js";const u=JSON.parse('{"title":"工作流开发","description":"","frontmatter":{},"headers":[],"relativePath":"workflow_develop.md","filePath":"workflow_develop.md"}'),n={name:"workflow_develop.md"};function l(p,s,r,h,o,d){return t(),i("div",null,s[0]||(s[0]=[e(`<h1 id="工作流开发" tabindex="-1">工作流开发 <a class="header-anchor" href="#工作流开发" aria-label="Permalink to &quot;工作流开发&quot;">​</a></h1><h2 id="引用" tabindex="-1">引用 <a class="header-anchor" href="#引用" aria-label="Permalink to &quot;引用&quot;">​</a></h2><p>所有的接口引用都使用 <span>{{inputs.节点 ID}}</span> 来引用。在任何输入字符串的地方可采用这种方式来引用。（包括代码节点）</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>{{inputs.start.query.name}} - 引用start节点的query参数的name属性</span></span>
<span class="line"><span>{{inputs.XXXXX.result.data.name}} - 引用XXXXX节点的result参数的data属性中的name属性</span></span></code></pre></div><ol><li>inputs 表示该引用来自输入端点</li><li>第二位表示连接 input 端口的某个节点的 ID</li><li>第三位以后表示该节点 outputs 中的 JSON 对象的嵌套属性名。</li></ol><h2 id="代码节点" tabindex="-1">代码节点 <a class="header-anchor" href="#代码节点" aria-label="Permalink to &quot;代码节点&quot;">​</a></h2><p>代码节点使用 javascript 来编写。</p><p>代码参考：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 在工作流节点中的代码可以这样写：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputs.start.query.number1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> inputs.xxxxx.result.number2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;计算结果:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, sum);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sum;</span></span></code></pre></div><ol><li>直接在代码中使用 inputs 来获取输入端点的数据</li><li>支持使用 console.log 来输出日志</li><li>最终须要调用 return 来返回结果。</li></ol><h2 id="其他节点" tabindex="-1">其他节点 <a class="header-anchor" href="#其他节点" aria-label="Permalink to &quot;其他节点&quot;">​</a></h2><p>其他节点，如：chat、bot、plugin、branch、iterator、code、panel 等，都是直接使用输入端点的数据。</p><div class="vp-raw"><p>bot\\plugin\\chat 等节点输入一般用 result 包裹结果。所以需要使用 <span>{{inputs.节点 ID.result}}</span> 来引用。</p></div><p>如果不确定，可以使用 panel 节点来查看某个节点的输出端点的数据。</p>`,14)]))}const c=a(n,[["render",l]]);export{u as __pageData,c as default};
